---
description: Composition over Inheritance
globs: 
alwaysApply: true
---
You are generating code that follows the Composition over Inheritance principle. Adhere to these guidelines:
1. FAVOR object composition over class inheritance:
    * Build complex objects by combining simpler components
    * Use interfaces to define behavior contracts
    * Prefer “has-a” relationships over “is-a” relationships
    * Avoid deep inheritance hierarchies (>2-3 levels)
2. IMPLEMENTATION guidelines:
    * Inject dependencies rather than extending base classes
    * Use interface implementation for behavior contracts
    * Apply decorator pattern for extending functionality
    * Implement mixins/traits for reusable behaviors
3. VALIDATION criteria:
    * Features are added through composition
    * Components can be reused in different contexts
    * Behavior can be modified without changing inheritance
    * System is flexible to requirement changes
4. EXAMPLE structure:
    * Vehicle with Engine component instead of Car extends Vehicle
    * Logger interface with multiple implementations
    * Authentication service composed of multiple validators
    * UI component composed of smaller, reusable elements