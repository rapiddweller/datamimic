[build-system]
requires = [
    "setuptools",          # Core setup tools for building and installing Python packages
    "wheel",               # Builds wheel archives for your package
    "setuptools-scm>=8",   # For automated versioning using SCM tags
]
build-backend = "setuptools.build_meta"

[project]
name = "datamimic_ce"
dynamic = ["version"]  # Version is determined dynamically via setuptools-scm
authors = [{ name = "Rapiddweller Asia Co., Ltd.", email = "info@rapiddweller.com" }]
readme = "README.md"
license = { file = "LICENSE.txt" }
keywords = [
    "datamimic", "data", "synthetic", "generation", "privacy",
    "security", "testing", "modeling"
]
urls = { Homepage = "https://datamimic.io" }
requires-python = ">=3.10"
dependencies = [
    "dill==0.3.8",                          # import dill - Used for pickling
    "faker==19.13.0",                       # from faker import Faker - Used for generating fake data
    "numpy==1.26.4",                        # import numpy as np - Used for numerical operations
    "oracledb==2.1.2",                      # import oracledb - Used for Oracle database connections
    "psycopg2-binary==2.9.9",               # import psycopg2 - Used for PostgreSQL database connections
    "pydantic==2.10.2",                    # from pydantic import BaseModel - Used for data validation
    "pydantic-settings==2.6.1",            # from pydantic_settings import BaseSettings - Used for settings management
    "pydantic[email]",                     # from pydantic import EmailStr - Used for email validation
    "pymongo==4.6.3",                      # import pymongo - Used for MongoDB connections
    "pyodbc==5.1.0",                       # import pyodbc - Used for ODBC connections
    "python-dotenv==1.0.1",                # from dotenv import load_dotenv
    "requests==2.32.2",                    # import requests - Used for making HTTP requests
    "sqlalchemy==2.0.36",                         # from sqlalchemy import create_engine
    "xmltodict==0.13.0",                  # import xmltodict - Used for parsing XML data to Python dictionaries
    "pandas==2.2.3",                      # import pandas as pd - Used for data manipulation
    "toml>=0.10.2",                       # import toml
    "typer>=0.12.5",                      # import typer
    "psutil>=6.1.0",                      # import psutil
    "exrex>=0.12.0",                      # import exrex - Used for generating random strings
    "lxml>=5.3.0",                      # import lxml - Used for XML Tree
]

[tool.setuptools_scm]
local_scheme = "dirty-tag"  # Includes a "dirty" tag in version if working directory is not clean

[project.scripts]
datamimic = "datamimic_ce.cli:app"  # Entry point for your CLI application

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests_ce"]
namespaces = true


[tool.uv]

dev-dependencies = [
    "build>=1.2.2.post1", # PEP 517 build frontend for building distributions
    "pytest~=8.0.0", # Testing framework
    "pytest-xdist~=3.5.0", # Distributed testing (parallel execution)
    "pytest-cov~=6.0.0", # Coverage reporting for pytest
    "memory-profiler~=0.61.0", # Monitors memory usage during code execution
    "ruff>=0.8", # Fast Python linter written in Rust
    "sqlalchemy-stubs>=0.4",
    "prettytable==3.10.0", # from prettytable import PrettyTable
    "mypy==1.14.0",
    "types-toml>=0.10.8.20240310",
    "types-requests>=2.32.0",
    "pandas-stubs>=2.2.0",
    "types-psutil>=6.0.0",
    "types-xmltodict>=0.13.0",
    "types-lxml>=5.3.0",
]

[tool.mypy]
python_version = "3.11"

[tool.ruff]
line-length = 120                  # Maximum line length
target-version = "py311"          # Target Python version for linting

[tool.ruff.lint]
exclude = [".git", "__pycache__", "node_modules", "public", ".venv", "tests_ce"]  # Exclude these directories from linting
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]

[tool.pytest.ini_options]
markers = ["run: Custom marker for running specific tests"]  # Custom markers for pytest
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.pytest]
parallel = true  # Enable parallel test execution
addopts = "-n auto --dist=loadscope"

[tool.pyright]
typeCheckingMode="off"
