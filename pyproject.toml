[build-system]
requires = [
    "setuptools",          # Core setup tools for building and installing Python packages
    "wheel",               # Builds wheel archives for your package
    "setuptools-scm>=8",   # For automated versioning using SCM tags
]
build-backend = "setuptools.build_meta"

[project]
name = "datamimic_ce"
dynamic = ["version"]  # Version is determined dynamically via setuptools-scm
authors = [{ name = "Rapiddweller Asia Co., Ltd.", email = "info@rapiddweller.com" }]
readme = "README.md"
license = { file = "LICENSE.txt" }
keywords = [
    "datamimic", "data", "synthetic", "generation", "privacy",
    "security", "testing", "modeling"
]
urls = { Homepage = "https://datamimic.io" }
requires-python = ">=3.10"
dependencies = [
    "annotated-types==0.6.0", # Provides support for type annotations
    "argon2-cffi-bindings==21.2.0", # Low-level bindings for Argon2 password hashing
    "argon2-cffi==23.1.0", # High-level wrapper for Argon2 password hashing
    "asn1crypto==1.5.1", # Implementation of ASN.1 types and DER/PEM encoding
    "attrs==23.2.0", # Class attribute definitions for Python classes
    "certifi==2024.7.4", # Certificates for secure HTTPS connections
    "cffi==1.15.1", # Foreign Function Interface for calling C code
    "charset-normalizer==3.3.2", # Encoding detection for text strings
    "colorama", # Cross-platform colored terminal text
    "cryptography", # Library for cryptographic recipes and primitives
    "dependency==0.0.3", # Manages dependencies (please verify this package)
    "dicttoxml==1.7.16", # Converts Python dictionaries to XML
    "dill==0.3.8", # Serialize all of Python (pickle extension)
    "dnspython==2.6.1", # DNS toolkit for Python
    "email-validator==2.1.1", # Validates email addresses
    "exrex", # Generates all possible matches for a regex
    "faker==19.13.0", # Generates fake data for testing
    "filelock==3.13.1", # Platform-independent file locking
    "greenlet", # Lightweight in-process concurrent programming
    "idna==3.7", # Internationalized Domain Names in Applications (IDNA)
    "numpy==1.26.4", # Fundamental package for scientific computing
    "oracledb==2.1.2", # Oracle Database interface for Python
    "packaging==23.2", # Core utilities for Python packages
    "platformdirs==3.11.0", # Determines appropriate platform-specific directories
    "prettytable==3.10.0", # Displays tabular data in a visually appealing ASCII table format
    "psycopg2-binary==2.9.9", # PostgreSQL database adapter for Python
    "pycparser==2.22", # C parser and AST generator written in Python
    "pycryptodome==3.20.0", # Cryptographic library for Python
    "pydantic-core==2.10.1", # Core validation logic for Pydantic
    "pydantic-settings", # Manages settings using Pydantic models
    "pydantic", # Data validation and settings management using Python type annotations
    "pyjwt==2.8.0", # JSON Web Token implementation in Python
    "pymongo==4.6.3", # MongoDB driver for Python
    "pyodbc==5.1.0", # Python ODBC bridge
    "python-dateutil==2.9.0.post0", # Extensions to the standard datetime module
    "python-dotenv==1.0.1", # Reads key-value pairs from a .env file and sets them as environment variables
    "pytz==2024.1", # World Timezone Definitions for Python
    "requests==2.32.2", # HTTP library for Python
    "six==1.16.0", # Python 2 and 3 compatibility utilities
    "sortedcontainers==2.4.0", # Fast and pure-Python implementation of sorted collections
    "sqlalchemy==1.4.52", # SQL toolkit and Object-Relational Mapping (ORM) library
    "typing-extensions==4.11.0", # Backported and experimental type hints
    "tzdata==2024.1", # Time zone database for Python
    "urllib3==2.2.2", # HTTP client for Python
    "wcwidth==0.2.13", # Measures number of terminal column cells of wide-character codes
    "xmltodict==0.13.0", # Makes working with XML feel like you are working with JSON
    "pandas==2.2.1", # Data analysis and manipulation library
    "krbticket==1.0.6", # Kerberos ticket management
    "toml>=0.10.2", # TOML configuration file parser
    "tomlkit==0.12.4", # Style-preserving TOML library
    "typer>=0.12.5", # Build CLI applications based on Python type hints
    "psutil>=6.0.0", # Process and system utilities
    "types-toml>=0.10.8.20240310",
]

[tool.setuptools_scm]
local_scheme = "dirty-tag"  # Includes a "dirty" tag in version if working directory is not clean

[project.scripts]
datamimic = "datamimic_ce.cli:app"  # Entry point for your CLI application

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
where = ["datamimic_ce"]
exclude = ["tests_ce"]
namespaces = true

[tool.uv]

dev-dependencies = [
    "build>=1.2.2.post1", # PEP 517 build frontend for building distributions
    "pytest~=6.2.5", # Testing framework
    "pytest-xdist~=3.5.0", # Distributed testing (parallel execution)
    "pytest-cov~=6.0.0", # Coverage reporting for pytest
    "memory-profiler~=0.61.0", # Monitors memory usage during code execution
    "ruff>=0.7.4", # Fast Python linter written in Rust
    "sqlalchemy-stubs>=0.4",
]

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = false
check_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true  # Allow implicit optional types
allow_untyped_calls = true  # Allow calls to functions without type annotations
allow_untyped_globals = true  # Allow global variables without type annotations
allow_untyped_decorators = true  # Allow decorators without type annotations
allow_incomplete_defs = true  # Allow functions with incomplete type annotations

[tool.pydantic-mypy]
init_forbid_extra = false  # Allow extra arguments in Pydantic models' __init__
init_typed = false  # Do not enforce type annotations in __init__
warn_required_dynamic_aliases = false  # Do not warn about required dynamic aliases
warn_untyped_fields = false  # Do not warn about untyped fields

[tool.ruff]
line-length = 120                  # Maximum line length
target-version = "py311"          # Target Python version for linting

[tool.ruff.lint]
exclude = [".git", "__pycache__", "node_modules", "public", ".venv", "tests_ce"]  # Exclude these directories from linting
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]

[tool.pytest.ini_options]
markers = ["run: Custom marker for running specific tests"]  # Custom markers for pytest

[tool.pytest]
parallel = true  # Enable parallel test execution
addopts = "-n auto --dist=loadscope"
